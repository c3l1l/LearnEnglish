// <auto-generated />
using System;
using LearnEnglish.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LearnEnglish.Migrations
{
    [DbContext(typeof(LearnEnglishContext))]
    [Migration("20220302221250_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LearnEnglish.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryType = "GrammarTips",
                            CreatedDate = new DateTime(2022, 3, 3, 1, 12, 49, 305, DateTimeKind.Local).AddTicks(8252),
                            Name = "Grammar Tips _1",
                            Rank = (byte)0
                        });
                });

            modelBuilder.Entity("LearnEnglish.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR(25)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            ContentId = 1,
                            ContentType = "Instruction",
                            CreatedDate = new DateTime(2022, 3, 3, 1, 12, 49, 306, DateTimeKind.Local).AddTicks(3050),
                            Rank = (byte)0,
                            Title = "Present Perfect T."
                        });
                });

            modelBuilder.Entity("LearnEnglish.Models.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructionId");

                    b.ToTable("Instruction");

                    b.HasData(
                        new
                        {
                            InstructionId = 1,
                            CreatedDate = new DateTime(2022, 3, 3, 1, 12, 49, 306, DateTimeKind.Local).AddTicks(7540),
                            Title = "Present Perfect T."
                        });
                });

            modelBuilder.Entity("LearnEnglish.Models.InstructionDetail", b =>
                {
                    b.Property<int>("InstructionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructionId")
                        .HasColumnType("int");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.HasKey("InstructionDetailId");

                    b.HasIndex("InstructionId");

                    b.ToTable("InstructionDetails");
                });

            modelBuilder.Entity("LearnEnglish.Models.InstructionSound", b =>
                {
                    b.Property<int>("InstructionSoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructionId")
                        .HasColumnType("int");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<string>("SoundName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoundUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructionSoundId");

                    b.HasIndex("InstructionId");

                    b.ToTable("InstructionSounds");
                });

            modelBuilder.Entity("LearnEnglish.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR(40)");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("LearnEnglish.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            CreatedDate = new DateTime(2022, 3, 3, 1, 12, 49, 305, DateTimeKind.Local).AddTicks(5418),
                            Rank = (byte)0,
                            Title = "1A"
                        });
                });

            modelBuilder.Entity("LearnEnglish.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            ThemeId = 1,
                            CreatedDate = new DateTime(2022, 3, 3, 1, 12, 49, 302, DateTimeKind.Local).AddTicks(4270),
                            IsActive = (short)1,
                            Level = "A1",
                            Rank = (byte)0,
                            Title = "Theme-1"
                        });
                });

            modelBuilder.Entity("LearnEnglish.Models.MultiGapFillingQuestion", b =>
                {
                    b.HasBaseType("LearnEnglish.Models.Question");

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MultiGapFillingQuestion");
                });

            modelBuilder.Entity("LearnEnglish.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("LearnEnglish.Models.Question");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice4")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("LearnEnglish.Models.SingleGapFillingQuestion", b =>
                {
                    b.HasBaseType("LearnEnglish.Models.Question");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SingleGapFillingQuestion_Answer");

                    b.HasDiscriminator().HasValue("SingleGapFillingQuestion");
                });

            modelBuilder.Entity("LearnEnglish.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("LearnEnglish.Models.Question");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TrueFalseQuestion_Answer");

                    b.Property<string>("Choice1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TrueFalseQuestion_Choice1");

                    b.Property<string>("Choice2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TrueFalseQuestion_Choice2");

                    b.HasDiscriminator().HasValue("TrueFalseQuestion");
                });

            modelBuilder.Entity("LearnEnglish.Models.Category", b =>
                {
                    b.HasOne("LearnEnglish.Models.Section", null)
                        .WithMany("Categories")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("LearnEnglish.Models.Content", b =>
                {
                    b.HasOne("LearnEnglish.Models.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LearnEnglish.Models.Instruction", "Instruction")
                        .WithMany()
                        .HasForeignKey("InstructionId");

                    b.HasOne("LearnEnglish.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Category");

                    b.Navigation("Instruction");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LearnEnglish.Models.InstructionDetail", b =>
                {
                    b.HasOne("LearnEnglish.Models.Instruction", "Instruction")
                        .WithMany("InstructionDetails")
                        .HasForeignKey("InstructionId");

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("LearnEnglish.Models.InstructionSound", b =>
                {
                    b.HasOne("LearnEnglish.Models.Instruction", "Instruction")
                        .WithMany("InstructionSounds")
                        .HasForeignKey("InstructionId");

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("LearnEnglish.Models.Section", b =>
                {
                    b.HasOne("LearnEnglish.Models.Theme", "Theme")
                        .WithMany("Sections")
                        .HasForeignKey("ThemeId");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("LearnEnglish.Models.Category", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("LearnEnglish.Models.Instruction", b =>
                {
                    b.Navigation("InstructionDetails");

                    b.Navigation("InstructionSounds");
                });

            modelBuilder.Entity("LearnEnglish.Models.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("LearnEnglish.Models.Theme", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
